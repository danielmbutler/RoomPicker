// Generated by Dagger (https://dagger.dev).
package com.dbtechprojects.meetingRoomApp.util;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.hilt.lifecycle.ViewModelAssistedFactory;
import androidx.hilt.lifecycle.ViewModelFactoryModules_ActivityModule_ProvideFactoryFactory;
import androidx.hilt.lifecycle.ViewModelFactoryModules_FragmentModule_ProvideFactoryFactory;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import androidx.lifecycle.ViewModelProvider;
import com.dbtechprojects.meetingRoomApp.data.RoomApi;
import com.dbtechprojects.meetingRoomApp.database.RoomDAO;
import com.dbtechprojects.meetingRoomApp.di.AppModule;
import com.dbtechprojects.meetingRoomApp.di.AppModule_ProvideMainRepositoryFactory;
import com.dbtechprojects.meetingRoomApp.di.AppModule_ProvideRoomApiFactory;
import com.dbtechprojects.meetingRoomApp.di.AppModule_ProvideRoomDaoFactory;
import com.dbtechprojects.meetingRoomApp.repository.DefaultRepository;
import com.dbtechprojects.meetingRoomApp.ui.activities.MainActivity;
import com.dbtechprojects.meetingRoomApp.ui.activities.RoomDetailActivity;
import com.dbtechprojects.meetingRoomApp.ui.activities.SplashActivity;
import com.dbtechprojects.meetingRoomApp.ui.fragments.RoomListFragment;
import com.dbtechprojects.meetingRoomApp.ui.viewmodels.RoomDetailViewModel_AssistedFactory;
import com.dbtechprojects.meetingRoomApp.ui.viewmodels.RoomDetailViewModel_AssistedFactory_Factory;
import com.dbtechprojects.meetingRoomApp.ui.viewmodels.RoomListViewModel_AssistedFactory;
import com.dbtechprojects.meetingRoomApp.ui.viewmodels.RoomListViewModel_AssistedFactory_Factory;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.MemoizedSentinel;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerHiltApplication_HiltComponents_SingletonC extends HiltApplication_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private volatile Object roomApi = new MemoizedSentinel();

  private volatile Object defaultRepository = new MemoizedSentinel();

  private volatile Provider<DefaultRepository> provideMainRepositoryProvider;

  private DaggerHiltApplication_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  private RoomApi roomApi() {
    Object local = roomApi;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = roomApi;
        if (local instanceof MemoizedSentinel) {
          local = AppModule_ProvideRoomApiFactory.provideRoomApi();
          roomApi = DoubleCheck.reentrantCheck(roomApi, local);
        }
      }
    }
    return (RoomApi) local;
  }

  private RoomDAO roomDAO() {
    return AppModule_ProvideRoomDaoFactory.provideRoomDao(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private DefaultRepository defaultRepository() {
    Object local = defaultRepository;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = defaultRepository;
        if (local instanceof MemoizedSentinel) {
          local = AppModule_ProvideMainRepositoryFactory.provideMainRepository(roomApi(), roomDAO());
          defaultRepository = DoubleCheck.reentrantCheck(defaultRepository, local);
        }
      }
    }
    return (DefaultRepository) local;
  }

  private Provider<DefaultRepository> defaultRepositoryProvider() {
    Object local = provideMainRepositoryProvider;
    if (local == null) {
      local = new SwitchingProvider<>(0);
      provideMainRepositoryProvider = (Provider<DefaultRepository>) local;
    }
    return (Provider<DefaultRepository>) local;
  }

  @Override
  public void injectHiltApplication(HiltApplication hiltApplication) {
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder();
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder appModule(AppModule appModule) {
      Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public HiltApplication_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new DaggerHiltApplication_HiltComponents_SingletonC(applicationContextModule);
    }
  }

  private final class ActivityRetainedCBuilder implements HiltApplication_HiltComponents.ActivityRetainedC.Builder {
    @Override
    public HiltApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl();
    }
  }

  private final class ActivityRetainedCImpl extends HiltApplication_HiltComponents.ActivityRetainedC {
    private volatile Object lifecycle = new MemoizedSentinel();

    private ActivityRetainedCImpl() {

    }

    private Object lifecycle() {
      Object local = lifecycle;
      if (local instanceof MemoizedSentinel) {
        synchronized (local) {
          local = lifecycle;
          if (local instanceof MemoizedSentinel) {
            local = ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();
            lifecycle = DoubleCheck.reentrantCheck(lifecycle, local);
          }
        }
      }
      return (Object) local;
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder();
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycle();
    }

    private final class ActivityCBuilder implements HiltApplication_HiltComponents.ActivityC.Builder {
      private Activity activity;

      @Override
      public ActivityCBuilder activity(Activity activity) {
        this.activity = Preconditions.checkNotNull(activity);
        return this;
      }

      @Override
      public HiltApplication_HiltComponents.ActivityC build() {
        Preconditions.checkBuilderRequirement(activity, Activity.class);
        return new ActivityCImpl(activity);
      }
    }

    private final class ActivityCImpl extends HiltApplication_HiltComponents.ActivityC {
      private final Activity activity;

      private volatile Provider<RoomDetailViewModel_AssistedFactory> roomDetailViewModel_AssistedFactoryProvider;

      private volatile Provider<RoomListViewModel_AssistedFactory> roomListViewModel_AssistedFactoryProvider;

      private ActivityCImpl(Activity activityParam) {
        this.activity = activityParam;
      }

      private RoomDetailViewModel_AssistedFactory roomDetailViewModel_AssistedFactory() {
        return RoomDetailViewModel_AssistedFactory_Factory.newInstance(DaggerHiltApplication_HiltComponents_SingletonC.this.defaultRepositoryProvider());
      }

      private Provider<RoomDetailViewModel_AssistedFactory> roomDetailViewModel_AssistedFactoryProvider(
          ) {
        Object local = roomDetailViewModel_AssistedFactoryProvider;
        if (local == null) {
          local = new SwitchingProvider<>(0);
          roomDetailViewModel_AssistedFactoryProvider = (Provider<RoomDetailViewModel_AssistedFactory>) local;
        }
        return (Provider<RoomDetailViewModel_AssistedFactory>) local;
      }

      private RoomListViewModel_AssistedFactory roomListViewModel_AssistedFactory() {
        return RoomListViewModel_AssistedFactory_Factory.newInstance(DaggerHiltApplication_HiltComponents_SingletonC.this.defaultRepositoryProvider());
      }

      private Provider<RoomListViewModel_AssistedFactory> roomListViewModel_AssistedFactoryProvider(
          ) {
        Object local = roomListViewModel_AssistedFactoryProvider;
        if (local == null) {
          local = new SwitchingProvider<>(1);
          roomListViewModel_AssistedFactoryProvider = (Provider<RoomListViewModel_AssistedFactory>) local;
        }
        return (Provider<RoomListViewModel_AssistedFactory>) local;
      }

      private Map<String, Provider<ViewModelAssistedFactory<? extends ViewModel>>> mapOfStringAndProviderOfViewModelAssistedFactoryOf(
          ) {
        return MapBuilder.<String, Provider<ViewModelAssistedFactory<? extends ViewModel>>>newMapBuilder(2).put("com.dbtechprojects.meetingRoomApp.ui.viewmodels.RoomDetailViewModel", (Provider) roomDetailViewModel_AssistedFactoryProvider()).put("com.dbtechprojects.meetingRoomApp.ui.viewmodels.RoomListViewModel", (Provider) roomListViewModel_AssistedFactoryProvider()).build();
      }

      private ViewModelProvider.Factory provideFactory() {
        return ViewModelFactoryModules_ActivityModule_ProvideFactoryFactory.provideFactory(activity, ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerHiltApplication_HiltComponents_SingletonC.this.applicationContextModule), mapOfStringAndProviderOfViewModelAssistedFactoryOf());
      }

      private Set<ViewModelProvider.Factory> defaultActivityViewModelFactorySetOfViewModelProviderFactory(
          ) {
        return Collections.<ViewModelProvider.Factory>singleton(provideFactory());
      }

      @Override
      public Set<String> getViewModelKeys() {
        return Collections.<String>emptySet();
      }

      @Override
      public ViewModelComponentBuilder getViewModelComponentBuilder() {
        return new ViewModelCBuilder();
      }

      @Override
      public void injectMainActivity(MainActivity mainActivity) {
      }

      @Override
      public void injectRoomDetailActivity(RoomDetailActivity roomDetailActivity) {
      }

      @Override
      public void injectSplashActivity(SplashActivity splashActivity) {
      }

      @Override
      public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
        return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerHiltApplication_HiltComponents_SingletonC.this.applicationContextModule), Collections.<String>emptySet(), new ViewModelCBuilder(), defaultActivityViewModelFactorySetOfViewModelProviderFactory(), Collections.<ViewModelProvider.Factory>emptySet());
      }

      @Override
      public FragmentComponentBuilder fragmentComponentBuilder() {
        return new FragmentCBuilder();
      }

      @Override
      public ViewComponentBuilder viewComponentBuilder() {
        return new ViewCBuilder();
      }

      private final class FragmentCBuilder implements HiltApplication_HiltComponents.FragmentC.Builder {
        private Fragment fragment;

        @Override
        public FragmentCBuilder fragment(Fragment fragment) {
          this.fragment = Preconditions.checkNotNull(fragment);
          return this;
        }

        @Override
        public HiltApplication_HiltComponents.FragmentC build() {
          Preconditions.checkBuilderRequirement(fragment, Fragment.class);
          return new FragmentCImpl(fragment);
        }
      }

      private final class FragmentCImpl extends HiltApplication_HiltComponents.FragmentC {
        private final Fragment fragment;

        private FragmentCImpl(Fragment fragmentParam) {
          this.fragment = fragmentParam;
        }

        private ViewModelProvider.Factory provideFactory() {
          return ViewModelFactoryModules_FragmentModule_ProvideFactoryFactory.provideFactory(fragment, ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerHiltApplication_HiltComponents_SingletonC.this.applicationContextModule), ActivityCImpl.this.mapOfStringAndProviderOfViewModelAssistedFactoryOf());
        }

        private Set<ViewModelProvider.Factory> defaultFragmentViewModelFactorySetOfViewModelProviderFactory(
            ) {
          return Collections.<ViewModelProvider.Factory>singleton(provideFactory());
        }

        @Override
        public void injectRoomListFragment(RoomListFragment roomListFragment) {
        }

        @Override
        public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
          return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerHiltApplication_HiltComponents_SingletonC.this.applicationContextModule), Collections.<String>emptySet(), new ViewModelCBuilder(), ActivityCImpl.this.defaultActivityViewModelFactorySetOfViewModelProviderFactory(), defaultFragmentViewModelFactorySetOfViewModelProviderFactory());
        }

        @Override
        public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
          return new ViewWithFragmentCBuilder();
        }

        private final class ViewWithFragmentCBuilder implements HiltApplication_HiltComponents.ViewWithFragmentC.Builder {
          private View view;

          @Override
          public ViewWithFragmentCBuilder view(View view) {
            this.view = Preconditions.checkNotNull(view);
            return this;
          }

          @Override
          public HiltApplication_HiltComponents.ViewWithFragmentC build() {
            Preconditions.checkBuilderRequirement(view, View.class);
            return new ViewWithFragmentCImpl(view);
          }
        }

        private final class ViewWithFragmentCImpl extends HiltApplication_HiltComponents.ViewWithFragmentC {
          private ViewWithFragmentCImpl(View view) {

          }
        }
      }

      private final class ViewCBuilder implements HiltApplication_HiltComponents.ViewC.Builder {
        private View view;

        @Override
        public ViewCBuilder view(View view) {
          this.view = Preconditions.checkNotNull(view);
          return this;
        }

        @Override
        public HiltApplication_HiltComponents.ViewC build() {
          Preconditions.checkBuilderRequirement(view, View.class);
          return new ViewCImpl(view);
        }
      }

      private final class ViewCImpl extends HiltApplication_HiltComponents.ViewC {
        private ViewCImpl(View view) {

        }
      }

      private final class SwitchingProvider<T> implements Provider<T> {
        private final int id;

        SwitchingProvider(int id) {
          this.id = id;
        }

        @SuppressWarnings("unchecked")
        @Override
        public T get() {
          switch (id) {
            case 0: // com.dbtechprojects.meetingRoomApp.ui.viewmodels.RoomDetailViewModel_AssistedFactory 
            return (T) ActivityCImpl.this.roomDetailViewModel_AssistedFactory();

            case 1: // com.dbtechprojects.meetingRoomApp.ui.viewmodels.RoomListViewModel_AssistedFactory 
            return (T) ActivityCImpl.this.roomListViewModel_AssistedFactory();

            default: throw new AssertionError(id);
          }
        }
      }
    }

    private final class ViewModelCBuilder implements HiltApplication_HiltComponents.ViewModelC.Builder {
      private SavedStateHandle savedStateHandle;

      @Override
      public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
        this.savedStateHandle = Preconditions.checkNotNull(handle);
        return this;
      }

      @Override
      public HiltApplication_HiltComponents.ViewModelC build() {
        Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
        return new ViewModelCImpl(savedStateHandle);
      }
    }

    private final class ViewModelCImpl extends HiltApplication_HiltComponents.ViewModelC {
      private ViewModelCImpl(SavedStateHandle savedStateHandle) {

      }

      @Override
      public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
        return Collections.<String, Provider<ViewModel>>emptyMap();
      }
    }
  }

  private final class ServiceCBuilder implements HiltApplication_HiltComponents.ServiceC.Builder {
    private Service service;

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public HiltApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(service);
    }
  }

  private final class ServiceCImpl extends HiltApplication_HiltComponents.ServiceC {
    private ServiceCImpl(Service service) {

    }
  }

  private final class SwitchingProvider<T> implements Provider<T> {
    private final int id;

    SwitchingProvider(int id) {
      this.id = id;
    }

    @SuppressWarnings("unchecked")
    @Override
    public T get() {
      switch (id) {
        case 0: // com.dbtechprojects.meetingRoomApp.repository.DefaultRepository 
        return (T) DaggerHiltApplication_HiltComponents_SingletonC.this.defaultRepository();

        default: throw new AssertionError(id);
      }
    }
  }
}
