// Generated by Dagger (https://dagger.dev).
package com.dbtechprojects.meetingRoomApp.di;

import com.dbtechprojects.meetingRoomApp.data.RoomApi;
import com.dbtechprojects.meetingRoomApp.database.RoomDAO;
import com.dbtechprojects.meetingRoomApp.repository.DefaultRepository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideMainRepositoryFactory implements Factory<DefaultRepository> {
  private final Provider<RoomApi> apiProvider;

  private final Provider<RoomDAO> daoProvider;

  public AppModule_ProvideMainRepositoryFactory(Provider<RoomApi> apiProvider,
      Provider<RoomDAO> daoProvider) {
    this.apiProvider = apiProvider;
    this.daoProvider = daoProvider;
  }

  @Override
  public DefaultRepository get() {
    return provideMainRepository(apiProvider.get(), daoProvider.get());
  }

  public static AppModule_ProvideMainRepositoryFactory create(Provider<RoomApi> apiProvider,
      Provider<RoomDAO> daoProvider) {
    return new AppModule_ProvideMainRepositoryFactory(apiProvider, daoProvider);
  }

  public static DefaultRepository provideMainRepository(RoomApi api, RoomDAO dao) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideMainRepository(api, dao));
  }
}
